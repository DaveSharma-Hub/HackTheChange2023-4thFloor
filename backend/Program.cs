// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.ML;
using Microsoft.OpenApi.Models;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;
using MLModel1_WebApi2;
using System;
using Microsoft.ML.Data;
using System.Collections.Generic;
using System.Buffers.Text;

// Configure app
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddPredictionEnginePool<MLModel1.ModelInput, MLModel1.ModelOutput>()
    .FromFile("MLModel1.zip");
builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo { Title = "My API", Description = "Docs for my API", Version = "v1" });
});

builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(
        builder =>
        {

            //you can configure your custom policy
            builder.AllowAnyOrigin()
                                .AllowAnyHeader()
                                .AllowAnyMethod();
        });
});
var app = builder.Build();

app.UseCors();
app.UseSwagger();

app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
});


// Define prediction route & handler
app.MapPost("/predict",
    async (PredictionEnginePool<MLModel1.ModelInput, MLModel1.ModelOutput> predictionEnginePool, [Microsoft.AspNetCore.Mvc.FromBody] string imagePath) =>
    {
        List<object> listObj = new List<object>();
        Console.WriteLine(imagePath);
        var input = new MLModel1.ModelInput()
        {
            ImageSource = Convert.FromBase64String(imagePath),
        };
        var labelNames = new List<string>();
        MLModel1.ModelOutput result = predictionEnginePool.Predict(input);
        var column = predictionEnginePool.GetPredictionEngine().OutputSchema.GetColumnOrNull("Label");
        if (column.HasValue)
        {
            VBuffer<ReadOnlyMemory<char>> vbuffer = new VBuffer<ReadOnlyMemory<char>>();
            column.Value.GetKeyValues(ref vbuffer);

            foreach (ReadOnlyMemory<char> denseValue in vbuffer.DenseValues())
                labelNames.Add(denseValue.ToString());
        }
        listObj.Add(result);
        listObj.Add(labelNames);
        return await Task.FromResult(listObj);
    });

// Run app
app.Run();
